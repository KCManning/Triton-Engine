vec4 calcSpotLight(SpotLight spotLight, vec3 normal)
{
	vec3 pointDirection = spotLight.pointLight.position - worldPos0;
	float spotFactor = dot(pointDirection, spotLight.direction);
	
	float distanceToPoint = length(pointDirection);
	
	pointDirection = normalize(pointDirection);
	
	if(distanceToPoint > spotLight.pointLight.range)
	{
		return vec4(0, 0, 0, 0);
	}
	
	if(spotFactor < spotLight.cutoff)
	{
		return vec4(0, 0, 0, 0);
	}
	
	float spotCenterToPoint = dot(pointDirection, normal) * tan(acos(spotFactor/(length(spotLight.direction)*distanceToPoint)) + acos(distanceToPoint)) - distanceToPoint * sin(acos(distanceToPoint));
	
	vec4 color = calcLight(spotLight.pointLight.base, spotLight.direction, normal);
	
	float attenuation = spotLight.pointLight.atten.constant + spotLight.pointLight.atten.linear * spotCenterToPoint +
	spotLight.pointLight.atten.exponent * spotCenterToPoint * spotCenterToPoint + 0.0001;
	
	return color / attenuation;
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal)
{
	vec3 pointDirection = spotLight.pointLight.position - worldPos0;
	float spotFactor = dot(pointDirection, spotLight.direction);
	
	vec4 color = vec4(0, 0, 0, 0);
	
	if(spotFactor > spotLight.cutoff)
	{
		color = calcPointLight(spotLight.pointLight, normal) * (1.0 - spotFactor)/(1.0 - spotLight.cutoff);
	}
	
	return color;
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal)
{
	vec3 lightDirection = spotLight.pointLight.position - worldPos0;
	
	float distanceToPoint = length(lightDirection);
	
	float spotFactor = dot(lightDirection, spotLight.direction);
	
	if(distanceToPoint > spotLight.pointLight.range)
	{
		return vec4(0, 0, 0, 0);
	}
	
	float spotCenterToPoint = dot(lightDirection, normal) * tan(acos(spotFactor/(length(spotLight.direction)*distanceToPoint)) + acos(distanceToPoint)) - distanceToPoint * sin(acos(distanceToPoint));
	
	if(spotFactor > spotLight.cutoff)
	{
		return vec4(0, 0, 0, 0);
	}
	
	lightDirection = normalize(lightDirection);
	
	vec4 color = calcLight(spotLight.pointLight.base, spotLight.direction, normal);
	
	float attenuation = spotLight.pointLight.atten.constant + spotLight.pointLight.atten.linear * spotCenterToPoint +
	spotLight.pointLight.atten.exponent * spotCenterToPoint * spotCenterToPoint + 0.0001;
	
	return color / attenuation;
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal) //creates and unchanging circle of light
{
	vec3 lightDirection = spotLight.pointLight.position - worldPos0;
	
	float distanceToPoint = length(lightDirection);
	
	float spotFactor = dot(lightDirection, spotLight.direction);
	
	float spotCenterToPoint = dot(lightDirection, normal) * tan(acos(spotFactor/(length(spotLight.direction)*distanceToPoint)) + acos(distanceToPoint)) - distanceToPoint * sin(acos(distanceToPoint));
	
	if(spotCenterToPoint > spotLight.pointLight.range)
	{
		return vec4(0, 0, 0, 0);
	}
	
	vec4 color = calcLight(spotLight.pointLight.base, spotLight.direction, normal);
	
	float attenuation = spotLight.pointLight.atten.constant + spotLight.pointLight.atten.linear * spotCenterToPoint +
	spotLight.pointLight.atten.exponent * spotCenterToPoint * spotCenterToPoint + 0.0001;
	
	return color / (attenuation/spotLight.cutoff);
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal)
{
	vec3 lightDirection = spotLight.pointLight.position - worldPos0;
	
	float distanceToPoint = length(lightDirection);
	
	float spotFactor = dot(lightDirection, spotLight.direction);
	
	float spotCenterToPoint = dot(lightDirection, normal) * tan(acos(spotFactor/(length(spotLight.direction)*distanceToPoint)) + acos(distanceToPoint)) - distanceToPoint * sin(acos(distanceToPoint));
	
	if(spotCenterToPoint > spotLight.pointLight.range)
	{
		return vec4(0, 0, 0, 0);
	}
	
	vec4 color = calcLight(spotLight.pointLight.base, spotLight.direction, normal);
	
	float attenuation = spotLight.pointLight.atten.constant + spotLight.pointLight.atten.linear * spotCenterToPoint +
	spotLight.pointLight.atten.exponent * spotCenterToPoint * spotCenterToPoint + 0.0001;
	
	return color / (attenuation/spotLight.cutoff);
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal) //doesn't work, works like benny's equations
{
	vec3 lightDirection = spotLight.pointLight.position - worldPos0;
	
	float distanceToPoint = length(lightDirection);
	
	vec4 color = vec4(0, 0, 0, 0);
	
	float spotFactor = dot(normalize(spotLight.direction), normalize(-lightDirection));
	if(spotFactor > spotLight.cutoff)
	{
		spotFactor = pow(spotFactor, spotLight.exponent);
		attenuation = spotFactor/(spotLight.pointLight.atten.constant + 
			spotLight.pointLight.atten.linear * distanceToPoint + 
			spotLight.pointLight.atten.exponent * distanceToPoint * distanceToPoint);
		color = calcLight(spotLight.pointLight.base, spotLight.direction, normal)/ attenuation;
	}
	
	return color;
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal)
{
	vec3 lightDirection = spotLight.pointLight.position - worldPos0;
	
	float distanceToPoint = length(lightDirection);
	
	float spotFactor = dot(lightDirection, spotLight.direction);
	
	float spotCenterToPoint = dot(lightDirection, normal) * tan(acos(spotFactor/(length(spotLight.direction)*distanceToPoint)) + acos(distanceToPoint)) - distanceToPoint * sin(acos(distanceToPoint));
	
	spotFactor = max(dot(normalize(spotLight.direction), normalize(-lightDirection)), 0.0);
	
	if(spotCenterToPoint > spotLight.pointLight.range)
	{
		return vec4(0, 0, 0, 0);
	}
	
	if(spotFactor < spotLight.cutoff)
	{
		return vec4(0, 0, 0, 0);
	}
	
	spotFactor = pow(spotFactor, spotLight.exponent);
	
	vec4 color = calcLight(spotLight.pointLight.base, spotLight.direction, normal);
	
	float attenuation0 = spotFactor/(spotLight.pointLight.atten.constant + spotLight.pointLight.atten.linear * spotCenterToPoint +
	spotLight.pointLight.atten.exponent * spotCenterToPoint * spotCenterToPoint + 0.0001);
	
	float attenuation1 = spotFactor/(spotLight.pointLight.atten.constant + spotLight.pointLight.atten.linear * distanceToPoint +
	spotLight.pointLight.atten.exponent * distanceToPoint * distanceToPoint + 0.0001);
	
	return color * attenuation0 * attenuation1 * (1.0 - spotFactor)/(1.0 - spotLight.cutoff);
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal) //is okay for looking down but no flashlight effect
{
	vec3 lightDirection = spotLight.pointLight.position - worldPos0;
	
	float distanceToPoint = length(lightDirection);
	
	float spotFactor = dot(lightDirection, spotLight.direction);
	
	float spotCenterToPoint = dot(lightDirection, normal) * tan(acos(spotFactor/(length(spotLight.direction)*distanceToPoint)) + acos(distanceToPoint)) - distanceToPoint * sin(acos(distanceToPoint));
	
	spotFactor = max(dot(normalize(spotLight.direction), normalize(-lightDirection)), 0.0);
	
	if(spotCenterToPoint > spotLight.pointLight.range)
	{
		return vec4(0, 0, 0, 0);
	}
	
	if(spotFactor < spotLight.cutoff)
	{
		return vec4(0, 0, 0, 0);
	}
	
	spotFactor = pow(spotFactor, spotLight.exponent);
	
	vec4 color = calcLight(spotLight.pointLight.base, spotLight.direction, normal);
	
	float attenuation0 = spotFactor/(spotLight.pointLight.atten.constant + spotLight.pointLight.atten.linear * spotCenterToPoint +
	spotLight.pointLight.atten.exponent * spotCenterToPoint * spotCenterToPoint + 0.0001);
	
	float attenuation1 = spotFactor/(spotLight.pointLight.atten.constant + spotLight.pointLight.atten.linear * distanceToPoint +
	spotLight.pointLight.atten.exponent * distanceToPoint * distanceToPoint + 0.0001);
	
	return color * attenuation0 * attenuation1;
}